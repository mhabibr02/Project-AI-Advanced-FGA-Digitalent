// Implement exponential backoff

do

{

    try

    {

        attempts++;

        result = await searchClient.IndexDocumentsAsync(batch).ConfigureAwait(false);

 

        var failedDocuments = result.Results.Where(r => r.Succeeded != true).ToList();

 

        // handle partial failure

        if (failedDocuments.Count > 0)

        {

            if (attempts == maxRetryAttempts)

            {

                Console.WriteLine("[MAX RETRIES HIT] - Giving up on the batch starting at {0}", id);

                break;

            }

            else

            {

                Console.WriteLine("[Batch starting at doc {0} had partial failure]", id);

                Console.WriteLine("[Retrying {0} failed documents] \n", failedDocuments.Count);

 

                // creating a batch of failed documents to retry

                var failedDocumentKeys = failedDocuments.Select(doc => doc.Key).ToList();

                hotels = hotels.Where(h => failedDocumentKeys.Contains(h.HotelId)).ToList();

                batch = IndexDocumentsBatch.Upload(hotels);

 

                Task.Delay(delay).Wait();

                delay = delay * 2;

                continue;

            }

        }

 

        return result;

    }

    catch (RequestFailedException ex)

    {

        Console.WriteLine("[Batch starting at doc {0} failed]", id);

        Console.WriteLine("[Retrying entire batch] \n");

 

        if (attempts == maxRetryAttempts)

        {

            Console.WriteLine("[MAX RETRIES HIT] - Giving up on the batch starting at {0}", id);

            break;

        }

 

        Task.Delay(delay).Wait();

        delay = delay * 2;

    }

} while (true);
